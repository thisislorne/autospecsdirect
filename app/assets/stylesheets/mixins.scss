 // Mixins 

@mixin parent_height {
  &:after { content: ""; display: table; clear: both; }
}

@mixin button($width: auto, $height: auto, $bg: #4294f0) {
  width: $width;
  height: $height;

  @if $width == 'auto' {
    padding: 0.5em 1em;
  }
  cursor: pointer;
  line-height: $height;
  text-align: center;
  border: 1px solid darken($bg, 10);
  border-radius: 3px;
  box-shadow: inset 0 2px 0 0 adjust-color($bg, $lightness: 5%);
  color: white;
  display: inline-block;
  font-size: inherit;
  font-weight: bold;
  background-color: $bg;
  text-decoration: none;
  text-shadow: 0 1px 0 ligthen($bg, 10);
  background-clip: padding-box;
  @include transition(background-color 0.2s ease-in);
  &:hover {
    background-color: darken($bg, 5);
  }
}

@mixin shadow {
  box-shadow: 0 2px 2px 0 rgba(0,0,0,0.16), 0 0 0 1px rgba(0,0,0,0.08);
  border: 0;

  &:hover {
      box-shadow: 2px 3px 5px 0 rgba(0,0,0,0.16), 0 0 0 1px rgba(0,0,0,0.08);
  }
}

@mixin button ($w: 80%, $c1: #ff8400, $c2: #41c21e) {
  width: $w;
  background-color: $c1;
  border: 0;
  color: #fff;
  position: relative;
  height: 50px;
  // border-radius: 4px;
  transition: all 200ms ease;

  &:hover {
    background-color: $c2;
  }

  img {
      width: 25px;
      position: absolute;
      left: 15px;
      top: 12px;
  }

  span {
      margin-left: 49px;
      font-size: 1.3em;
      font-weight: 700;
      border-left: 1px solid #fff;
      border-left: 1px solid rgba(255, 255, 255, 0.5);
      height: 50px;
      display: block;
      line-height: 50px;
      position: relative;
      top: -2px;
      padding-left: 4px;
  }
}

@mixin outer-container($local-max-width: $max-width) {
  @include clearfix;
  max-width: $local-max-width;
  margin: {
    left: auto;
    right: auto;
  }
}

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}



@mixin transition($properties...) {
  @include _bourbon-deprecate-for-prefixing("transition");

  // Fix for vendor-prefix transform property
  $needs-prefixes: false;
  $webkit: ();
  $moz: ();
  $spec: ();

  // Create lists for vendor-prefixed transform
  @each $list in $properties {
    @if nth($list, 1) == "transform" {
      $needs-prefixes: true;
      $list1: -webkit-transform;
      $list2: -moz-transform;
      $list3: ();

      @each $var in $list {
        $list3: join($list3, $var);

        @if $var != "transform" {
          $list1: join($list1, $var);
          $list2: join($list2, $var);
        }
      }

      $webkit: append($webkit, $list1);
      $moz:    append($moz,    $list2);
      $spec:   append($spec,   $list3);
    } @else {
      $webkit: append($webkit, $list, comma);
      $moz:    append($moz,    $list, comma);
      $spec:   append($spec,   $list, comma);
    }
  }

  @if $needs-prefixes {
    -webkit-transition: $webkit;
       -moz-transition: $moz;
            transition: $spec;
  } @else {
    @if length($properties) >= 1 {
      @include prefixer(transition, $properties, webkit moz spec);
    } @else {
      $properties: all 0.15s ease-out 0s;
      @include prefixer(transition, $properties, webkit moz spec);
    }
  }
}

@mixin transition-property($properties...) {
  @include _bourbon-deprecate-for-prefixing("transition-property");

  -webkit-transition-property: transition-property-names($properties, "webkit");
     -moz-transition-property: transition-property-names($properties, "moz");
          transition-property: transition-property-names($properties, false);
}

@mixin transition-duration($times...) {
  @include _bourbon-deprecate-for-prefixing("transition-duration");

  @include prefixer(transition-duration, $times, webkit moz spec);
}

@mixin transition-timing-function($motions...) {
  @include _bourbon-deprecate-for-prefixing("transition-timing-function");

  // ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier()
  @include prefixer(transition-timing-function, $motions, webkit moz spec);
}

@mixin transition-delay($times...) {
  @include _bourbon-deprecate-for-prefixing("transition-delay");

  @include prefixer(transition-delay, $times, webkit moz spec);
}

@mixin _bourbon-deprecate($feature, $message: null) {
  @content;
}

@mixin _bourbon-deprecate-for-prefixing($feature) {
  @include _bourbon-deprecate($feature, "We suggest using an automated " +
    "prefixing tool, like Autoprefixer.");
}

$prefix-for-webkit:    true !global;
$prefix-for-mozilla:   true !global;
$prefix-for-microsoft: true !global;
$prefix-for-opera:     true !global;
$prefix-for-spec:      true !global;


@mixin prefixer($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      @if $prefix-for-webkit {
        -webkit-#{$property}: $value;
      }
    } @else if $prefix == moz {
      @if $prefix-for-mozilla {
        -moz-#{$property}: $value;
      }
    } @else if $prefix == ms {
      @if $prefix-for-microsoft {
        -ms-#{$property}: $value;
      }
    } @else if $prefix == o {
      @if $prefix-for-opera {
        -o-#{$property}: $value;
      }
    } @else if $prefix == spec {
      @if $prefix-for-spec {
        #{$property}: $value;
      }
    } @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}